// Add this at the top if not already present
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ‚úÖ ‚úÖ Only this enum should exist ‚Äî place it near the top
enum Role {
  ADMIN
  STAFF
  HELPER
}


// üè¢ Facility Model
model Facility {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  license   String
  createdAt DateTime @default(now())

  users     User[]
  babies    Baby[]
  }

  

// üë§ User Model
model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  emailVerified  DateTime?  // ‚úÖ Add this line
  name           String?
  role           Role      @default(HELPER)
  facility       Facility? @relation(fields: [facilityId], references: [id])
  facilityId     Int?
  accounts       Account[]
  sessions       Session[]
}



// üë∂ Updated Baby Model
model Baby {
  id          Int       @id @default(autoincrement())
  name        String
  email       String?
  createdAt   DateTime  @default(now())

  facilityId  Int
  facility    Facility  @relation(fields: [facilityId], references: [id])

  sleepLogs   SleepLog[]
  diaperLogs  DiaperLog[]
  feedingLogs FeedingLog[]
  bottleFeeds BottleFeed[]
  dailyNotes  DailyNote[]
}

// ‚úÖ Keep your other models as-is for now



model SleepLog {
  id        Int           @id @default(autoincrement())
  babyId    Int
  baby      Baby          @relation(fields: [babyId], references: [id], onDelete: Cascade)
  start     DateTime
  end       DateTime?
  note      String?       @db.Text
  createdAt DateTime      @default(now())

  // üëá Add this line to complete the relation
  sleepChecks SleepCheck[]
}




model DiaperLog {
  id        Int      @id @default(autoincrement())
  babyId    Int
  baby      Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)
  time      DateTime @default(now())
  type      DiaperType
  note      String?  @db.Text
}

model FeedingLog {
  id        Int      @id @default(autoincrement())
  babyId    Int
  baby      Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)
  time      DateTime @default(now())
  mealType  MealType
  menu      String
  quantity  Int
  note      String?  @db.Text
}

model BottleFeed {
  id        Int      @id @default(autoincrement())
  babyId    Int
  baby      Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)
  time      DateTime @default(now())
  volumeMl  Int
  note      String?  @db.Text
}

model DailyNote {
  id      Int      @id @default(autoincrement())
  babyId  Int
  date    DateTime
  content String

  baby    Baby     @relation(fields: [babyId], references: [id], onDelete: Cascade)

  @@unique([babyId, date], name: "babyId_date")
}

model SleepCheck {
  id        Int      @id @default(autoincrement())
  sleepLog  SleepLog @relation(fields: [sleepLogId], references: [id], onDelete: Cascade)
  sleepLogId Int
  checkedAt DateTime @default(now())
}




enum DiaperType {
  WET
  SOLID
  BOTH
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String      @unique
  expires    DateTime

  @@unique([identifier, token])
}
